import pandas as pd
import streamlit as st
import plotly.express as px
from datetime import datetime

st.set_page_config(page_title="SFIC Dashboard", layout="wide")

st.title("‡§µ‡§ø‡§≠‡§æ‡§ó‡•Ä‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§î‡§∞ FIR ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°\nBy SM Mahendra Yadav")

# ‚úÖ ‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
today = datetime.now().strftime("%d-%m-%Y %H:%M")
st.markdown(f"üïí **‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï ‡§î‡§∞ ‡§∏‡§Æ‡§Ø:** `{today}`")

# File Upload
file = st.file_uploader("Excel ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", type=["xlsx", "xls"])
if file:
    df = pd.read_excel(file)
    df.columns = df.columns.str.strip()

    # Optional cleaning
    df["‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø"] = pd.to_numeric(df["‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø"], errors="coerce")
    df["‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø"] = pd.to_numeric(df["‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø"], errors="coerce")
    df["FIR Date"] = pd.to_datetime(df["FIR Date"], errors="coerce")

    # Sidebar Filters
    st.sidebar.header("Filter Options")
    divisions = st.sidebar.multiselect("‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç", df["‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ"].dropna().unique())
    if divisions:
        df = df[df["‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ"].isin(divisions)]

    # DDO Filter
    ddo_column = next((col for col in df.columns if "DDO" in col.upper()), None)
    if ddo_column:
        ddo_list = df[ddo_column].dropna().unique()
        selected_ddos = st.sidebar.multiselect("DDO ‡§ö‡•Å‡§®‡•á‡§Ç", ddo_list)
        if selected_ddos:
            df = df[df[ddo_column].isin(selected_ddos)]

    # e-file no Filter
    if "e-file no" in df.columns:
        efile_list = df["e-file no"].dropna().unique()
        selected_efiles = st.sidebar.multiselect("E-File No ‡§ö‡•Å‡§®‡•á‡§Ç", efile_list)
        if selected_efiles:
            df = df[df["e-file no"].isin(selected_efiles)]

    # KPIs
    st.subheader("üìä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ü‡§Å‡§ï‡§°‡§º‡•á:")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡§ï‡•Å‡§≤ ‡§™‡•ç‡§∞‡§ï‡§∞‡§£", len(df))
    col2.metric("‡§ï‡•Å‡§≤ ‡§π‡§æ‡§®‡§ø ‡§∞‡§æ‡§∂‡§ø", f"{df['‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø'].sum():,.2f} ‚Çπ")
    col3.metric("‡§ï‡•Å‡§≤ ‡§µ‡§∏‡•Ç‡§≤‡•Ä", f"{df['‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø'].sum():,.2f} ‚Çπ")

    # ‚úÖ Division Wise Status (Grouped Bar Chart)
    st.subheader("üìä ‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡§æ‡§®‡§ø ‡§î‡§∞ ‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø (Division Wise Status)")
    div_chart_data = df.groupby("‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ")[["‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø", "‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø"]].sum().reset_index()

    fig_div = px.bar(
        div_chart_data,
        x="‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ",
        y=["‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø", "‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø"],
        barmode="group",
        title="Division Wise ‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø vs ‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø",
        text_auto=True
    )

    fig_div.update_layout(
        yaxis_tickformat=',',
        yaxis_title="‡§∞‡§æ‡§∂‡§ø (‚Çπ ‡§Æ‡•á‡§Ç)"
    )
    fig_div.update_traces(
        hovertemplate='%{y:,.0f} ‚Çπ<extra></extra>'
    )

    st.plotly_chart(fig_div, use_container_width=True)

    # ‚úÖ Recovery Percentage Summary Table
    st.subheader("üìã ‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§î‡§∞ ‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§")
    summary = df.groupby("‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ")[["‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø", "‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø"]].sum()
    summary = summary[summary.index != "Total"]
    summary["‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§"] = (summary["‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø"] / summary["‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø"]) * 100
    summary = summary.reset_index()
    st.dataframe(summary[["‡§∏‡§Ç‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§®‡§æ‡§Æ", "‡§π‡§æ‡§®‡§ø/‡§ó‡§¨‡§® ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø", "‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø", "‡§µ‡§∏‡•Ç‡§≤‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§"]], use_container_width=True)

    # ‚úÖ Download Button
    st.subheader("‚¨áÔ∏è Excel/CSV ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç")
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="CSV ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        data=csv,
        file_name="sfic_dashboard_data.csv",
        mime='text/csv'
    )

    # ‚úÖ Full Table
    st.subheader("üìã ‡§™‡•Ç‡§∞‡§æ ‡§°‡•á‡§ü‡§æ")
    st.dataframe(df, use_container_width=True)
